// Copyright 26-Jan-2023 ÂºDeme
// GNU General Public License - V3 <http://www.gnu.org/licenses/>

/// Iterator.

#ifndef LKUT_IT_H
  #define LKUT_IR_H

#include "arr.h"
#include "tp.h"

///
typedef struct it_It It;

/// it_new creates a new It.
///   o   : Container
///   next: Function which returns a element of 'o' or Opt_empty() if there
///         are no more elements.
It *it_new (void *o, Opt *(*next)(void *o));

/// Returns an It without elements.
It *it_empty (void);

/// Returns an It with the only element 'e'.
It *it_unary (void *e);

/// it_range is an iterator that returns values between begin (inclusive)
/// and end (exclusive).
It *it_range (int begin, int end);

/// it_range0 is equals to it_range(0, end).
It *it_range0 (int end);

/// Returns TRUE if 'this' has more elements.
int it_has_next (It *this);

/// Returns the next element of 'this' and advance one element.
void *it_next (It *this);

/// Shows next element witout advancing.
void *it_peek (It *this);

/// it_add adds an element at the end of 'this'.
It *it_add (It *this, void *element);

/// it_add0 adds an element at the beginning of 'this'.
It *it_add0 (It *this, void *element);

/// Adds 'another' to 'this'.
It *it_cat (It *this, It *another);

/// Returns the 'n' first elements of 'this'.
It *it_take (It *this, int n);

/// Returns a new It with the first elements which return 'TRUE' with 'predicate'.
/// 'pred' can be cast to FPRED.
It *it_takef (It *this, int (*predicate)(void *e));

/// Returns the remain elements of 'this' after call 'it_take'.
It *it_drop (It *this, int n);

/// Returns the remain elements of 'this' after call 'it_takef'.
It *it_dropf (It *this, int (*predicate)(void *e));

/// Returns a new It with every element which returns 'TRUE' with 'predicate'.
/// 'pred' can be cast to FPRED.
It *it_filter (It *this, int (*predicate)(void *e));

/// Returns a new It with elements generated by apply converter to them.
/// 'converter' can be cast to FMAP
It *it_map (It *this, void *(*converter)(void *e));

/// it_map2 applies conv1 to the first element and conv2 to the others.
It *it_map2 (It *this, void *(*conv1)(void *e), void *(*conv2)(void *e));

/// Returns It<Tp>. See arr_zip.
It *it_zip (It *it1, It *it2);

/// Returns It<Tp3>. See arr_zip3
It *it_zip3 (It *it1, It *it2, It *it3);

/// Reverse the order of 'this' calling 'arr_reverse'
It *it_reverse (It *this);

/// it_sort sorts 'this' calling 'arr_sort'.
It *it_sort (It *this, int (*greater)(void *e1, void *e2));

/// Executes 'fn' with each element of 'this'.
void it_each (It *this, void (*f)(void *e));

/// Executes 'fn' with each element of 'this' and its array index.
void it_each_ix (It *this, void (*f)(void *e, int ix));

/// Returns the number of elements of 'this'.
int it_count (It *this);

/// Returns TRUE if 'a1' has the same elements number as 'a2' and f(e1, e1) for
/// each element returns TRUE.
int it_eq (It *it1, It *it2, int (*feq)(void *e1, void *e2));

/// Returns the index of the first elements which returns 'TRUE'
/// with 'pred', or -1 if such element does not exist.
/// 'pred' can be cast to FPRED.
int it_index (It *this, int (*predicate)(void *e));

/// Equals to (it_index(a, fn) != -1)
int it_contains (It *this, int (*predicate)(void *e));

/// Returns the index of the last elements which returns 'TRUE'
/// with 'pred', or -1 if such element does not exist.
/// 'pred' can be cast to FPRED.
int it_last_index (It *this, int (*predicate)(void *e));

/// Returns the first element which satisfies 'predicate' or opt_none().
Opt *it_find (It *this, int (*predicate)(void *e));

/// Creates an array from 'this'.
Arr *it_to (It *this);

/// Creates an It from 'a'.
It *it_from (Arr *a);

/// Returns Tp<Arr, Arr> (dup, rest): 'dup' with duplicates values (only the
/// first case) and 'rest' with every element of 'this' without duplicates.
Tp *it_duplicates (It *this, int (feq)(void *e1, void *e2));

#endif
